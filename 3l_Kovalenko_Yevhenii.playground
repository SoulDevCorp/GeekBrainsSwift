import Foundation


enum engine {
    case start, stop
}

enum windowOpenOrClosed {
    case opened, closed
}

enum trunkFullOrEmpty {
    case full, empty
}

struct Car {
    let brand : String
    let model : String
    var color : String
    mutating func colorChange(c:String) {
        switch c {
        case "white":
            self.color = "Белый"
        case "black":
            self.color = "черный"
        case "red":
            self.color = "красный"
        case "blue":
            self.color = "голубой"
        default:
            print("Input error.")
        }
    }
    let release : Int
    var trunkVolume : Double {
        willSet {
            if (trunkState == .empty) && (trunkVolume > 0) && (trunkVolume != 0) && (newValue < trunkVolume) {
                let space = trunkVolume - newValue
                print ("\(brand)\(model) обьем багажника: \(space)")
            } else { print("Ошибка ввода или  \(brand)\(model) багажник заполнен.")}
        }
    }
    var engineState : engine {
        willSet {
            if newValue == .start {
                print ("\(brand)\(model)  включен")
            } else {print("\(brand)\(model)  выключен")}
        }
    }
    var windowState : windowOpenOrClosed {
        willSet {
            if newValue == .opened {
                print("\(brand)\(model) окна открыты")
            } else { print("\(brand)\(model) окна закрыты") }
        }
    }
    var trunkState : trunkFullOrEmpty
    mutating func emptyTrunck() {
        self.trunkState = .empty
        print ("\(brand)\(model) багажник пустой")
    }
}

struct someTruck {
    let brand : String
    let model : String
    var color : String
    mutating func colorChange(c:String) {
        switch c {
        case "white":
            self.color = "белый"
        case "black":
            self.color = "черный"
        case "red":
            self.color = "желтый"
        case "blue":
            self.color = "зеленый"
        default:
            print("Ошибка ввода.")
        }
    }
    let release : Int
    var bodyVolume : Double {
        willSet {
            if (trunkState == .empty) && (bodyVolume > 0) && (bodyVolume != 0) && (newValue < bodyVolume) {
                let space = bodyVolume - newValue
                print ("\(brand)\(model) обьем багажника: \(space)")
            } else { print("Ошибка ввода или  \(brand)\(model) багажник заполнен.")}
        }
    }
    var engine : engine {
        willSet {
            if newValue == .start {
                print ("\(brand)\(model) мотор включен")
            } else {print("\(brand)\(model) мотор выключен")}
        }
    }
    var windowState : windowOpenOrClosed {
        willSet {
            if newValue == .opened {
                print("\(brand)\(model) окна открыты")
            } else { print("\(brand)\(model) окна закрыты") }
        }
    }
    var trunkState : trunkFullOrEmpty
    mutating func emptyTrunck() {
        self.trunkState = .empty
        print ("\(brand)\(model) багажник пуст")
    }
}

var car1 = Car(brand: "Nissan ", model: "primera", color: "clear", release: 2006, trunkVolume: 480.0 , engineState: .start, windowState: .closed, trunkState: .empty)
var car2 = Car(brand: "Ford", model: "Mustang", color: "clear", release: 2017, trunkVolume: 580.0, engineState: .stop, windowState: .closed, trunkState: .full)

var truck1 = someTruck(brand: "Iveco ", model: "Stralis", color: "clear", release: 2014, bodyVolume: 100000.0, engine: .start, windowState: .opened, trunkState: .full)
var truck2 = someTruck(brand: "Iveco ", model: "Trakker", color: "clear", release: 2011, bodyVolume: 150000.0, engine: .start, windowState: .closed, trunkState: .empty)


car1.engineState = .stop
car1.trunkVolume = 340.0

car2.emptyTrunck()
car2.trunkVolume = 80.9
car2.windowState = .opened
truck1.engine = .stop
truck1.windowState = .closed
truck2.engine = .stop



print ("Первый автомобиль: \(car1.brand)\(car1.model), год выпуска: \(car1.release), цвет: \(String(describing: car1.color)), обьем багажника: \(car1.trunkVolume)")
